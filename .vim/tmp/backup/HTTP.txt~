
ETHERNET for Sarbre 

* Microcontroller: 

Der Microcontroller braucht Ethernet-Shield ( ethernet Module ) oder ein Wifi-Shield. 
Der Microcontroller muss in eine Netzwerk verbunden sein ( die gleiche Netzwerk , wo 
die Sabre board verbunden ist ) . 
F체r die Programmierung stehen die mit Ethernet-module hardware gelieferte Bibliotheke 
zur Verf체gung. Ansonsten kann andere Bibliotheke in Internet benutzen. 

Zu beacten: 
-> Mac Adress kann man am meisten festlegen das muss aber eindeutig in Netzwerk sein. 
-> IP Adress  wird von Hub vorgegeben , man muss hier rausfinden welche IP-Address 
    zu unsere Microcontroller zugewiesen wurde. 
-> Port , falls man die HTTP-Protokoll benutze ist port = 80 . 


* Sabre ( Android )

Verbindung w채re ein simple Client-Server Anwendung . wobei Sabre die Rolle der Client 
체bernimmt. 


       Client                               Server   
    1111111111111                        11111111111111111111
    1           1  Request -> Leds An    1                  1
    1 sabre     11111111111111111111111111 Microcontroller  1
    1           1                        1                  1
    1111111111111                        11111111111111111111



Beispiel : 

Vorgabe : 

Microcontroller und Sabre befindet sich in der gleichen Netzwerk . 

-> Microcontroller hat IP = 192.0.0.1 , Port 80 

Sample Code in Java Seite der Android : 


------------------AndroidManifest------------------------------------------ 
...... 
<uses-permission android:name="android.permission.INTERNET"> 
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE">  
----------------------------------------------------------------------------

import org.apache.http.client.HttpClient; 
import org.apache.http.client.methods.HttpGet; 
import org.apache.http.client.DefaultHttpClient; 

//..... 
//........ 

public static String CONTROLLER_IP = "192.0.0.1"; 
public static String URLCOMMAND1 = "http://"+CONTROLLER_IP+"/"+"?"+"cmd=1"; 
public static String URLCOMMAND2 = "http://"+CONTROLLER_IP+"/"+"?"+"cmd=2";  

public void sendCommandToController( String url )
{
    try{
        HttpClient httpclient = new DefaultHttpClient(); 
        httpclient.execute( new HttpGet( url )); 
    }
    catch( Exception e ){}
}


//Aufruf der Function 

sendCommandToController( URLCOMMAND1 ); 
sendCommandToController( URLCOMMAND1 ); 




