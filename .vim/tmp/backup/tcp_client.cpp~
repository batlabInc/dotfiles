

#include "tcp_client.h"
#include "Message.h" 
#include "definition.h"
#include <QString>

TCPClient::TCPClient( QObject *parent)
{
    parent = 0; 

    connect( &_ssocket, SIGNAL( connected()), 
             this     , SLOT  ( connected())); 

    connect( &_ssocket, SIGNAL( disconnected()), 
             this     , SLOT  ( disconnected())); 

    connect( &_ssocket, SIGNAL( hostFound()), 
             this     , SLOT  ( hostFound())); 

    connect( &_ssocket, SIGNAL( readyRead()), 
             this     , SLOT  ( readFromServer())); 

    connect( &_ssocket, SIGNAL( error(QAbstractSocket::SocketError)), 
             this     , SLOT  ( error(QAbstractSocket::SocketError))); 
}


bool TCPClient::send( const &QString name, const &QString message )
{
    if( _ssocket.state() != QAbstractSocket::ConnectedState )
        return false; 

    QByteArray block; 
    QDataStream s( &block, QIODevice::WriteOnly ); 
    Message m; 
    m.type = 1; 
    m.size = sizeof( m ); 
    m.nameSize = name.length(); 
    QByteArray n = name.toAscii(); 

    for (int i = 0;  i < m.messageSize ; i++)
    {
     m.message[i] = n[i] ;
    }


    _ssocket.write( ( const byte*) &m, sizeof(m) ); 
return true; 
}


void TCPClient::readFromServer()
{
    if ( _ssocket.state() != QAbstractSocket::connected )
        return ; 
    if( _ssocket.bytesAvailable() != sizeof( Message ) )
        return ; 

    Message m; 
    _ssocket.read( (byte*) &m, sizeof(m)); 

    emit newMessage( new QString( (char*) &m.name), new QString( ( char*) &m.message)); 
}

