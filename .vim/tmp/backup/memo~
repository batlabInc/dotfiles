
# Type de variable en JavaScript 

* number 
* string 
* boolean 
* undefined 

/!\ La fonction typeOf permet de tester le type des variable. tres utile pour
    tester le des variable arguments d une fonction. </br>
Exemple:</br>

    ```
        function addition( a, b )
        {
            if( typeOf( a ) == "number" && 
                typeOf( b ) == "number") 
            {
                return a+b;  
            }
            else
            {
                return "entre des chiffres SVP" 
            }
        }
    ```

* Convertir les variable 
    - Convertir un string en int <strong color="green"> parseInt() </strong>

    ```
        var text = "1290"
        console.log( typeOf(text)); //Affiche string 

        var text_2_number = parseInt(text); 
        console.log( typeOf(text_2_number)); // Affiche number
    ```







#editer le CSS d un element 

* Inserer un code javaScript dans une page html 
  <-- <script src = "fichier.js"> </script> -->

* Acceder au proprieter CSS d un element ( element.style.proprieteCSS = valeur; )
  Exemple: 
  ```
   var el = document.getElementByTagName('p'); 
   el.style.color = "green"; 
  ```

  /!\ La methode decrite precedement ne convient pas a lire les proprietes 
      CSS conetenue dans un fichier css ou specifier dans le html a l aide 
      de <baliseHTML style="prorieteCSS = valeur"></baliseHTML> 

      ```
        var el = document.getElementByTagName('p');  
        console.log( "La couleur du paragraphe est"+ el.style.color ); 
        /*
         * Il ne s affichera rien , car style ne peut lire les proprietes CSS  
         */
      ```

 * Comment lire les proprietes CSS , quelles soit specifier a l aide de 
   style, dans un fichier CSS ou encore attribuer automatiquement. 

   Reponse : A l aide de la fonction <strong color="blue"> getComputedStyle() . 

   ```
    var text = document.getElementById('text'),
    color = getComputedStyle(text, null).color;
    console.log("La couleur de text est :"+ color);
   ```
   

#Les fonctions Anonymes 
    Les fonctions anonymes sont extremement importantes. 
    Elles permettent de creer : 
    * Les objects 
    * les evenements 
    * les variables statiques 
    * les closures 
    * IEF
    * ... etc 

   Syntaxe :
   ``` 
        function(){
            //instructions 1 
            //instructions 2 
            //...... 
        }
   ``` 

   /!\ Il existe la possibilite d assigner une variable a une fonction anonyme. 

   Syntaxe :
   ``` 
      var myfunc = function(){
            //instructions 1 
            //instructions 2 
            //...... 
        }; 
        //On poura donc exucuter cette fonction anonyme comme suit 
        myfunc(); 
   ``` 

   1) IEF ( Imediate Executed Functions )
        Syntax: 
        ```javascript
        //code partie I 
        //....
        //....
        //...

        (function(){
            //Tout le code qui suit est isonle de la partie I et II 
            //instructions 1 
            //instructions 2 
            //...... 

        })(); 

        //Code partie II 
        //....
        //...
        //...
        ```
        Les IEF servent a isolee le code une sorte de Sandbox . 
        Quand le code isolee a terminee son executions toutes les variables 
        sont detruite et donc plus accessible au reste du code. 
        Comment faire pour obtenue un resultat d une IEF ???? <br/>
        Cela se passe comme dans toutes autres fonctions "normal"

        ```javascript
        //code partie I 
        //....
        //....
        //...

        var valeur = (function(){
            //Tout le code qui suit est isonle de la partie I et II 
            //instructions 1 
            //instructions 2 
            //...... 
            
            return 'La valeur de retour de l IEF'; 

        })(); 

        //Code partie II 
        //....
        //...
        //...
        ```

## Manipuler la DOM HTML 

* Definition 
    - DOM : Document Object Model est une <strong>API</strong> pour les 
        document XML et HTML. 
    - API : Application Programming Interface ensemble d outils permettant 
      la communication entre plusieurs programme ou language. 

